name: Build and Release Kindle Capture

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Create Shadow JAR
      run: ./gradlew shadowJar
      
    - name: Create Windows App Image
      run: ./gradlew createWindowsExe
      
    - name: Create Windows MSI Installer
      run: ./gradlew createWindowsInstaller
      
    - name: Verify build outputs
      run: |
        echo "=== JAR Files ==="
        ls -la build/libs/
        echo "=== Distributions ==="
        ls -la build/distributions/
        echo "=== MSI Files ==="
        ls -la build/distributions/*.msi || echo "No MSI files found"
      shell: bash
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: kindle-capture-jar
        path: build/libs/kindle-capture-*.jar
        
    - name: Create App Image ZIP
      run: |
        cd build/distributions
        powershell Compress-Archive -Path "KindleCapture" -DestinationPath "KindleCapture-Windows-App.zip"
        cd ../..
      
    - name: Upload App Image artifact
      uses: actions/upload-artifact@v4
      with:
        name: kindle-capture-app-image
        path: build/distributions/KindleCapture-Windows-App.zip
        
    - name: Upload MSI Installer artifact
      uses: actions/upload-artifact@v4
      if: hashFiles('build/distributions/*.msi') != ''
      with:
        name: kindle-capture-msi
        path: build/distributions/*.msi
        
    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/libs/kindle-capture-*.jar
          build/distributions/*.msi
          build/distributions/KindleCapture-Windows-App.zip
        body: |
          ## 🎉 Kindle Capture Release
          
          Kindle for PCのページを自動スクリーンショット撮影し、PDFを作成するアプリケーションです。
          
          ### 📥 ダウンロード
          
          **🔧 MSIインストーラー（推奨）**
          - `KindleCapture-*.msi` - Windows用インストーラー
          - スタートメニューに追加、アンインストーラー付き
          - 管理者権限で実行してください
          
          **📁 ポータブル版**
          - `KindleCapture-Windows-App.zip` - 展開して実行
          - インストール不要、Java実行環境込み
          - 展開後 `bin/KindleCapture.exe` を実行
          
          **☕ JAR版**
          - `kindle-capture-*.jar` - Java 17以上が必要
          - `java -jar kindle-capture-*.jar` で実行
          
          ### 🚀 使用方法
          
          1. **Kindle for PC**を起動し、読みたい本を開く
          2. **Kindle Capture**を起動
          3. 「**Kindle Desktopを検出**」をクリック
          4. 「**保存フォルダを選択**」で保存先を指定
          5. 撮影間隔を設定（推奨：3-5秒）
          6. 「**撮影開始**」をクリック
          7. 撮影完了後「**PDFを作成**」をクリック
          
          ### 💻 システム要件
          
          - **OS**: Windows 10/11 (64bit)
          - **アプリ**: Kindle for PC
          - **メモリ**: 512MB以上の空きメモリ
          
          ### ⚠️ 注意事項
          
          - **個人使用限定**: 個人の読書用途に限定してください
          - **著作権遵守**: 撮影した画像の配布は行わないでください
          - **利用規約確認**: Kindle for PCの利用規約をご確認ください
          
          ### 🐛 トラブルシューティング
          
          - **Kindle Desktopが検出されない** → Kindle for PCを起動し、ウィンドウを表示状態にしてください
          - **スクリーンショットが真っ黒** → Kindleウィンドウを最前面に表示してください
          - **アクセス拒否エラー** → 管理者として実行してください
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-cross-platform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Create Shadow JAR
      run: ./gradlew shadowJar
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/test/
