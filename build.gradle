plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.kindlecapture'
version = '1.0-SNAPSHOT'

sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.openjfx:javafx-controls:20.0.1'
    implementation 'org.openjfx:javafx-fxml:20.0.1'
    implementation 'org.apache.pdfbox:pdfbox:3.0.0'
    implementation 'com.github.oshi:oshi-core:6.4.8'
    implementation 'net.java.dev.jna:jna:5.13.0'
    implementation 'net.java.dev.jna:jna-platform:5.13.0'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

javafx {
    version = '20.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

test {
    useJUnitPlatform()
}

// 標準のjar task を無効化（shadowJarを使用するため）
jar {
    enabled = false
    dependsOn shadowJar
}

shadowJar {
    manifest {
        attributes(
            'Main-Class': 'com.kindlecapture.KindleCaptureApp'
        )
    }
    archiveClassifier = ''
    mergeServiceFiles()
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

// Windows用のネイティブイメージ作成タスク
task createWindowsExe(type: Exec) {
    dependsOn shadowJar
    group = 'distribution'
    description = 'Creates Windows executable using jpackage'
    
    doFirst {
        // 既存のアプリケーションディレクトリを削除
        delete file('build/distributions/KindleCapture')
        
        // 出力ディレクトリを確保
        file('build/distributions').mkdirs()
        file('build/jpackage-input').mkdirs()
        
        // ShadowJARファイルをjpackage用の入力ディレクトリにコピー
        copy {
            from "build/libs/${project.name}-${version}.jar"
            into 'build/jpackage-input'
        }
    }
    
    commandLine 'jpackage',
        '--type', 'app-image',
        '--input', 'build/jpackage-input',
        '--dest', 'build/distributions',
        '--main-jar', "${project.name}-${version}.jar",
        '--main-class', 'com.kindlecapture.KindleCaptureApp',
        '--name', 'KindleCapture',
        '--app-version', '1.0',
        '--vendor', 'KindleCapture Team',
        '--description', 'Kindle Desktop Screenshot and PDF Creator',
        '--java-options', '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
        '--java-options', '--add-opens=java.desktop/sun.awt.windows=ALL-UNNAMED',
        '--runtime-image', System.getProperty('java.home')
}

// Windows用インストーラー作成タスク（改良版：ファイルロック対応）
task createWindowsInstaller(type: Exec) {
    dependsOn shadowJar
    group = 'distribution'
    description = 'Creates Windows MSI installer using jpackage'
    
    doFirst {
        // ファイルロック対策：プロセス終了とファイル削除を慎重に行う
        def distributionsDir = file('build/distributions')
        def kindleCaptureDir = file('build/distributions/KindleCapture')
        
        // 既存のMSIファイルを削除
        println "Cleaning up existing MSI files..."
        fileTree('build/distributions') { include '*.msi' }.each { msiFile ->
            if (msiFile.exists()) {
                println "Deleting existing MSI: ${msiFile.name}"
                msiFile.delete()
            }
        }
        
        // KindleCaptureディレクトリの慎重な削除
        if (kindleCaptureDir.exists()) {
            println "Removing existing KindleCapture directory..."
            
            // Windows環境でのファイルロック対策
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                // Java プロセスの場合のみkillを試行
                try {
                    // Javaプロセスを停止（GitHub Actions環境での安全性考慮）
                    def processKillCmd = "taskkill /F /IM java.exe /T 2>nul || echo No Java processes to kill"
                    def proc = processKillCmd.execute()
                    proc.waitFor()
                    Thread.sleep(1000)  // 1秒待機
                } catch (Exception e) {
                    println "Process cleanup warning: ${e.message}"
                }
                
                // リトライ機能付きの削除
                def maxRetries = 3
                def retry = 0
                while (kindleCaptureDir.exists() && retry < maxRetries) {
                    try {
                        retry++
                        println "Attempting to delete KindleCapture directory (attempt ${retry}/${maxRetries})..."
                        
                        // Gradleの標準削除を使用
                        delete kindleCaptureDir
                        
                        if (!kindleCaptureDir.exists()) {
                            println "Successfully deleted KindleCapture directory"
                            break
                        }
                    } catch (Exception e) {
                        println "Delete attempt ${retry} failed: ${e.message}"
                        if (retry < maxRetries) {
                            Thread.sleep(2000)  // 2秒待機してリトライ
                        }
                    }
                }
                
                // 最終的に削除できない場合の警告
                if (kindleCaptureDir.exists()) {
                    println "WARNING: Could not delete KindleCapture directory. MSI creation may fail."
                    println "This is often caused by file locks from previous jpackage runs."
                    // エラーにせず、継続する
                }
            } else {
                // Linux/Unix環境では通常の削除
                delete kindleCaptureDir
            }
        }
        
        // 出力ディレクトリを確保
        distributionsDir.mkdirs()
        file('build/jpackage-input').mkdirs()
        
        // ShadowJARファイルをjpackage用の入力ディレクトリにコピー
        copy {
            from "build/libs/${project.name}-${version}.jar"
            into 'build/jpackage-input'
        }
        
        println "Creating MSI installer for Windows..."
        println "Java Home: ${System.getProperty('java.home')}"
        println "OS: ${System.getProperty('os.name')}"
    }
    
    def jpackageArgs = [
        'jpackage',
        '--type', 'msi',
        '--input', 'build/jpackage-input',
        '--dest', 'build/distributions',
        '--main-jar', "${project.name}-${version}.jar",
        '--main-class', 'com.kindlecapture.KindleCaptureApp',
        '--name', 'KindleCapture',
        '--app-version', '1.0.0',
        '--vendor', 'KindleCapture Team',
        '--description', 'Kindle Desktop Screenshot and PDF Creator Tool',
        '--copyright', 'Copyright 2025 KindleCapture Team',
        '--java-options', '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
        '--java-options', '--add-opens=java.desktop/sun.awt.windows=ALL-UNNAMED',
        '--runtime-image', System.getProperty('java.home')
    ]
    
    // Windows環境でのみWindows専用オプションを追加
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        jpackageArgs.addAll([
            '--win-menu',
            '--win-shortcut',
            '--win-dir-chooser',
            '--win-upgrade-uuid', 'f0b5d3e4-1234-5678-9abc-def012345678'
        ])
    }
    
    commandLine jpackageArgs
    
    doLast {
        println "MSI installer creation completed!"
        
        // 作成されたMSIファイルの確認
        def msiFiles = fileTree('build/distributions') { include '*.msi' }
        if (msiFiles.isEmpty()) {
            println "WARNING: No MSI files were created."
            println "This may be due to jpackage errors or file system issues."
            
            // デバッグ情報の出力
            println "Contents of build/distributions:"
            fileTree('build/distributions').each { file ->
                println "  ${file.name} (${file.isDirectory() ? 'directory' : 'file'}) - ${file.length()} bytes"
            }
        } else {
            msiFiles.each { file ->
                println "Created MSI: ${file.absolutePath} (${file.length()} bytes)"
            }
        }
        
        // KindleCaptureディレクトリの状態確認
        def kindleCaptureDir = file('build/distributions/KindleCapture')
        if (kindleCaptureDir.exists()) {
            println "KindleCapture app-image directory is present (${kindleCaptureDir.list().length} files)"
        } else {
            println "KindleCapture app-image directory was cleaned up successfully"
        }
    }
}
