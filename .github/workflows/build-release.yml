name: Build and Release Kindle Capture

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~\.gradle\caches
          ~\.gradle\wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - name: Build with Gradle
      run: .\gradlew.bat clean build --stacktrace
      shell: cmd
      
    - name: Create Shadow JAR
      run: .\gradlew.bat shadowJar --stacktrace
      shell: cmd
      
    - name: Create Windows App Image
      run: |
        echo "Creating Windows App Image with JavaFX support..."
        .\gradlew.bat createWindowsExe --stacktrace --info
        
        echo "Checking created app-image structure..."
        if (Test-Path "build/distributions/KindleCapture") {
          echo "App-image created successfully"
          echo "Contents:"
          Get-ChildItem "build/distributions/KindleCapture" -Recurse | ForEach-Object {
            $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
            if ($_.PSIsContainer) {
              echo "  [DIR]  $relativePath"
            } else {
              echo "  [FILE] $relativePath ($($_.Length) bytes)"
            }
          }
          
          # Runtime modules check
          if (Test-Path "build/distributions/KindleCapture/runtime") {
            echo "Runtime directory found"
            $runtimeModules = Get-ChildItem "build/distributions/KindleCapture/runtime" -Recurse -Filter "*javafx*"
            if ($runtimeModules) {
              echo "JavaFX modules in runtime:"
              $runtimeModules | ForEach-Object { echo "  $($_.Name)" }
            } else {
              echo "WARNING: No JavaFX modules found in runtime"
            }
          }
        } else {
          echo "ERROR: App-image was not created"
        }
      shell: powershell
      
    - name: Prepare for MSI creation
      run: |
        Write-Host "Preparing for MSI creation..."
        
        # Java プロセスの確認と終了
        Write-Host "Checking for Java processes..."
        $javaProcesses = Get-Process -Name "java" -ErrorAction SilentlyContinue
        if ($javaProcesses) {
          Write-Host "Found $($javaProcesses.Count) Java processes. Attempting gentle shutdown..."
          $javaProcesses | ForEach-Object { 
            try {
              $_.CloseMainWindow()
              Start-Sleep -Seconds 2
            } catch {
              Write-Host "Could not close process gracefully: $($_.ProcessName)"
            }
          }
          Start-Sleep -Seconds 3
        }
        
        # 残存ファイルのクリーンアップ
        Write-Host "Cleaning up build artifacts..."
        if (Test-Path "build\distributions\KindleCapture") {
          Write-Host "Removing existing KindleCapture directory..."
          try {
            Remove-Item "build\distributions\KindleCapture" -Recurse -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
          } catch {
            Write-Host "Warning: Could not remove KindleCapture directory: $($_.Exception.Message)"
          }
        }
        
        # 既存MSIファイルの削除
        $existingMsi = Get-ChildItem "build\distributions\*.msi" -ErrorAction SilentlyContinue
        if ($existingMsi) {
          Write-Host "Removing existing MSI files..."
          $existingMsi | Remove-Item -Force -ErrorAction SilentlyContinue
        }
        
        Write-Host "MSI preparation completed."
      shell: powershell
      
    - name: Create Windows MSI Installer
      run: |
        echo "Creating MSI installer with enhanced JavaFX support..."
        .\gradlew.bat createWindowsInstaller --stacktrace --info
        
        echo "Verifying MSI creation..."
        $msiFiles = Get-ChildItem "build/distributions/*.msi" -ErrorAction SilentlyContinue
        if ($msiFiles) {
          $msiFiles | ForEach-Object {
            echo "Created MSI: $($_.Name) ($($_.Length) bytes)"
          }
        } else {
          echo "WARNING: No MSI files were created"
          echo "This might be due to jpackage issues or missing dependencies"
          
          # Show jpackage logs if available
          if (Test-Path "build/distributions") {
            echo "Contents of distributions directory:"
            Get-ChildItem "build/distributions" -Recurse | ForEach-Object {
              $type = if ($_.PSIsContainer) { "DIR" } else { "FILE" }
              echo "  [$type] $($_.Name)"
            }
          }
        }
      shell: powershell
      continue-on-error: true
      
    - name: Verify build outputs
      run: |
        Write-Host "=== JAR Files ==="
        if (Test-Path "build/libs") {
          Get-ChildItem "build/libs" | ForEach-Object { Write-Host "  $($_.Name) - $($_.Length) bytes" }
        } else {
          Write-Host "build/libs directory not found"
        }
        
        Write-Host "`n=== Distributions ==="
        if (Test-Path "build/distributions") {
          Get-ChildItem "build/distributions" | ForEach-Object { 
            if ($_.PSIsContainer) { 
              $type = "Directory"
            } else { 
              $type = "File"
            }
            Write-Host "  $($_.Name) - $type"
          }
        } else {
          Write-Host "build/distributions directory not found"
        }
        
        Write-Host "`n=== MSI Files ==="
        $msiFiles = Get-ChildItem "build/distributions/*.msi" -ErrorAction SilentlyContinue
        if ($msiFiles) {
          $msiFiles | ForEach-Object { Write-Host "  $($_.Name) - $($_.Length) bytes" }
        } else {
          Write-Host "No MSI files found"
        }
      shell: powershell
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kindle-capture-jar
        path: build/libs/kindle-capture-*.jar
        if-no-files-found: warn
        
    - name: Create App Image ZIP
      run: |
        Write-Host "Checking for KindleCapture app-image..."
        
        if (Test-Path "build/distributions/KindleCapture") {
          Write-Host "Creating ZIP archive from app-image..."
          try {
            # PowerShellでのパス変換
            $sourcePath = "build/distributions/KindleCapture"
            $destinationPath = "build/distributions/KindleCapture-Windows-App.zip"
            
            # ZIP作成
            Compress-Archive -Path "$sourcePath/*" -DestinationPath $destinationPath -Force
            Write-Host "ZIP created successfully: KindleCapture-Windows-App.zip"
            
            # ファイル情報表示
            if (Test-Path $destinationPath) {
              $fileInfo = Get-Item $destinationPath
              Write-Host "File size: $($fileInfo.Length) bytes"
            }
          } catch {
            Write-Host "Failed to create ZIP: $($_.Exception.Message)"
            Write-Host "Error details: $($_.Exception)"
            
            # 代替案: JAR から簡易実行ファイルを作成
            Write-Host "Creating alternative JAR-based package..."
            try {
              $jarPath = Get-ChildItem "build/libs/kindle-capture-*.jar" | Select-Object -First 1
              if ($jarPath) {
                $altDir = "build/distributions/KindleCapture-JAR"
                New-Item -ItemType Directory -Path $altDir -Force | Out-Null
                Copy-Item $jarPath.FullName "$altDir/kindle-capture.jar"
                
                # 実行用バッチファイル作成（YAML適合形式）
                $batLines = @(
                  '@echo off',
                  'echo Starting Kindle Capture...',
                  'java -jar kindle-capture.jar',
                  'pause'
                )
                $batContent = $batLines -join "`r`n"
                Set-Content -Path "$altDir/run.bat" -Value $batContent
                
                # README作成（YAML適合形式）
                $readmeLines = @(
                  'Kindle Capture - JAR Package',
                  '',
                  'Requirements:',
                  '- Java 17 or later must be installed',
                  '',
                  'Usage:',
                  '1. Double-click ''run.bat'' to start the application',
                  '2. Or run: java -jar kindle-capture.jar',
                  '',
                  'If you encounter issues, please install Java 17+ from:',
                  'https://adoptium.net/'
                )
                $readmeContent = $readmeLines -join "`r`n"
                Set-Content -Path "$altDir/README.txt" -Value $readmeContent
                
                # ZIP作成
                Compress-Archive -Path "$altDir/*" -DestinationPath "build/distributions/KindleCapture-JAR-Package.zip" -Force
                Write-Host "Alternative JAR package created: KindleCapture-JAR-Package.zip"
              }
            } catch {
              Write-Host "Failed to create alternative package: $($_.Exception.Message)"
            }
          }
        } else {
          Write-Host "KindleCapture app-image directory not found"
          
          # 再度App Image作成を試行
          Write-Host "Attempting to recreate app-image..."
          try {
            & ".\gradlew.bat" "createWindowsExe" "--stacktrace"
            
            if (Test-Path "build/distributions/KindleCapture") {
              Write-Host "App-image recreated successfully. Creating ZIP..."
              $sourcePath = "build/distributions/KindleCapture"
              $destinationPath = "build/distributions/KindleCapture-Windows-App.zip"
              Compress-Archive -Path "$sourcePath/*" -DestinationPath $destinationPath -Force
              Write-Host "ZIP created from recreated app-image"
            } else {
              Write-Host "Failed to recreate app-image"
            }
          } catch {
            Write-Host "Failed to recreate app-image: $($_.Exception.Message)"
          }
          
          Write-Host "Available files in build/distributions:"
          if (Test-Path "build/distributions") {
            Get-ChildItem "build/distributions" | ForEach-Object { 
              if ($_.PSIsContainer) { 
                $type = "Directory"
              } else { 
                $type = "File"
              }
              Write-Host "  $($_.Name) ($type)" 
            }
          } else {
            Write-Host "build/distributions directory does not exist"
          }
        }
      shell: powershell
      
    - name: Upload App Image artifact
      uses: actions/upload-artifact@v4
      if: hashFiles('build/distributions/KindleCapture-Windows-App.zip') != '' || hashFiles('build/distributions/KindleCapture-JAR-Package.zip') != ''
      with:
        name: kindle-capture-app-image
        path: |
          build/distributions/KindleCapture-Windows-App.zip
          build/distributions/KindleCapture-JAR-Package.zip
        if-no-files-found: ignore
        
    - name: Upload MSI Installer artifact
      uses: actions/upload-artifact@v4
      if: hashFiles('build/distributions/*.msi') != ''
      with:
        name: kindle-capture-msi
        path: build/distributions/*.msi
        if-no-files-found: ignore
        
    - name: Upload JAR as backup
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kindle-capture-jar-backup
        path: build/libs/kindle-capture-*.jar
        if-no-files-found: warn
        
    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/libs/kindle-capture-*.jar
          build/distributions/*.msi
          build/distributions/KindleCapture-Windows-App.zip
          build/distributions/KindleCapture-JAR-Package.zip
        body: |
          ## 🎉 Kindle Capture Release
          
          Kindle for PCのページを自動スクリーンショット撮影し、PDFを作成するアプリケーションです。
          
          ### 📥 ダウンロード
          
          **🔧 MSIインストーラー（推奨）**
          - `KindleCapture-*.msi` - Windows用インストーラー
          - スタートメニューに追加、アンインストーラー付き
          - 管理者権限で実行してください
          
          **📁 ポータブル版**
          - `KindleCapture-Windows-App.zip` - 完全独立型（推奨）
          - `KindleCapture-JAR-Package.zip` - Java実行環境付き
          - インストール不要、Java実行環境込み
          - 展開後 `bin/KindleCapture.exe` を実行（App版）
          - 展開後 `run.bat` を実行（JAR版）
          
          **☕ JAR版**
          - `kindle-capture-*.jar` - Java 17以上が必要
          - `java -jar kindle-capture-*.jar` で実行
          
          ### 🚀 使用方法
          
          1. **Kindle for PC**を起動し、読みたい本を開く
          2. **Kindle Capture**を起動
          3. 「**Kindle Desktopを検出**」をクリック
          4. 「**保存フォルダを選択**」で保存先を指定
          5. 撮影間隔を設定（推奨：3-5秒）
          6. 「**撮影開始**」をクリック
          7. 撮影完了後「**PDFを作成**」をクリック
          
          ### 💻 システム要件
          
          - **OS**: Windows 10/11 (64bit)
          - **アプリ**: Kindle for PC
          - **メモリ**: 512MB以上の空きメモリ
          
          ### ⚠️ 注意事項
          
          - **個人使用限定**: 個人の読書用途に限定してください
          - **著作権遵守**: 撮影した画像の配布は行わないでください
          - **利用規約確認**: Kindle for PCの利用規約をご確認ください
          
          ### 🐛 トラブルシューティング
          
          - **Kindle Desktopが検出されない** → Kindle for PCを起動し、ウィンドウを表示状態にしてください
          - **スクリーンショットが真っ黒** → Kindleウィンドウを最前面に表示してください
          - **アクセス拒否エラー** → 管理者として実行してください
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-cross-platform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew clean build --stacktrace
      
    - name: Create Shadow JAR
      run: ./gradlew shadowJar --stacktrace
      
    - name: Run tests
      run: ./gradlew test --stacktrace
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-cross-platform
        path: build/reports/tests/test/
        if-no-files-found: ignore
